// PIC24FJ128GA010 Configuration Bit Settings
// For more on Configuration Bits, see Section 1.1
// consult your device data sheet
// CONFIG2
#pragma config POSCMOD = XT // XT Oscillator mode selected
#pragma config OSCIOFNC = ON // OSC2/CLKO/RC15 as port I/O (RC15)
#pragma config FCKSM = CSDCMD // Clock Switching and Monitor disabled
#pragma config FNOSC = PRI // Primary Oscillator (XT, HS, EC)
#pragma config IESO = ON // Int Ext Switch Over Mode enabled
// CONFIG1
#pragma config WDTPS = PS32768 // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128 // WDT Prescaler (1:128)
#pragma config WINDIS = ON // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF // Watchdog Timer disabled
#pragma config ICS = PGx2 // Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF // Writes to program memory allowed
#pragma config GCP = OFF // Code protection is disabled
#pragma config JTAGEN = OFF // JTAG port is disabled
// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.
#include <xc.h>
#include <libpic30.h>
void program1();
void program2();
void program3();
void program4();
void program5();
void program6();
int main(void) {
    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
    TRISA = 0x0000; // set all
    program7();      
    return 0;
}

void program1()
{
    while(1)
    {
        for(int i=0; i < 255; i++)
        {
            LATA = i;
            __delay32(500000);
        }
    }
}
void program2()
{
    while(1)
    {
        for(int i=255; i > 0; i--)
        {
            LATA = i;
            __delay32(500000);
        }
    }
}
void program3()
{
    while(1)
    {
        for(int i = 0; i < 255; i++)
        {
            int liczba = i ^ (i >> 1);
            LATA = liczba;
            __delay32(500000);
        }
    }
}
void program4()
{
    while(1)
    {
        for(int i = 255; i > 0; i--)
        {
            int liczba = i ^ (i >> 1);
            LATA = liczba;
            __delay32(500000);
        }
    }
}
void program5()
{
    while(1)
    {
        for(int i = 0; i < 99; i++)
        {
            int liczba = (((i/10) << 4) | (i % 10));
            LATA = liczba;
            __delay32(5000000);
        }
    }
}
void program6()
{
    while(1)
    {
        for(int i = 99; i > 0; i--)
        {
            int liczba = (((i/10) << 4) | (i % 10));
            LATA = liczba;
            __delay32(5000000);
        }
    }
}
void program7()
{
    while(1)
    {
        int i = 0b111;
        int liczba1 = 3;
        for(liczba1;liczba1<8;liczba1++)
        {
            LATA = i;
            __delay32(500000);
            i = i << 1;
        }
        liczba1 = 8;
        for(liczba1;liczba1>3;liczba1--)
        {
            LATA = i;
            __delay32(500000);
            i = i >> 1;
        }
    }
}
